// src/Components/Header.jsx
import React, { useEffect, useMemo, useRef, useState } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { useAuth } from '../Hooks/useAuth';
import { useTranslation } from 'react-i18next';
import { flagByLang } from './Flag';

// базовые стили из фиги
import '../Styles/Header.css';

// AI поповер-чат
import ChatWidget from './ChatWidget';

export default function Header() {
  const navigate = useNavigate();
  const { t, i18n } = useTranslation();
  const { user, refresh } = useAuth();

  const tt = (key, fallback) => {
    const v = t(key);
    return v === key ? fallback : v;
  };

  useEffect(() => {
    if (!user) return;
    const ping = () =>
      fetch('http://localhost:5050/api/heartbeat', { method: 'POST', credentials: 'include' }).catch(() => {});
    ping();
    const id = setInterval(ping, 20000);
    return () => clearInterval(id);
  }, [user]);

  useEffect(() => {
    const saved = localStorage.getItem('i18nextLng');
    if (saved && saved !== i18n.language) i18n.changeLanguage(saved);
  }, [i18n]);

  const changeLang = (code) => {
    i18n.changeLanguage(code);
    localStorage.setItem('i18nextLng', code);
  };

  const handleLogout = async () => {
    await fetch('http://localhost:5050/api/logout', { method: 'POST', credentials: 'include' });
    await refresh();
    navigate('/');
  };

  const [q, setQ] = useState('');
  const onSearch = (e) => {
    e.preventDefault();
    const query = q.trim();
    if (!query) return;
    navigate(`/search?q=${encodeURIComponent(query)}`);
  };

  const langs = useMemo(
    () => [
      { code: 'uk', label: tt('lang.uk', 'Українська') },

      { code: 'en', label: tt('lang.en', 'English') },
    ],
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [i18n.language]
  );

  // ЯЗЫК
  const langBtnRef = useRef(null);
  const menuRef = useRef(null);
  const [langOpen, setLangOpen] = useState(false);
  const [langPos, setLangPos] = useState({ left: 0, top: 0 });

  const onToggleLang = () => {
    if (!langBtnRef.current) return;
    const r = langBtnRef.current.getBoundingClientRect();
    setLangPos({ left: r.left, top: r.bottom + 8 });
    setLangOpen((v) => !v);
  };

  useEffect(() => {
    const onDoc = (e) => {
      if (!langOpen) return;
      const path =
        (typeof e.composedPath === 'function' && e.composedPath()) ||
        e.path ||
        [];
      if (path.includes(langBtnRef.current) || path.includes(menuRef.current)) return;
      setLangOpen(false);
    };
    const onEsc = (e) => e.key === 'Escape' && setLangOpen(false);

    document.addEventListener('mousedown', onDoc);
    document.addEventListener('keydown', onEsc);
    return () => {
      document.removeEventListener('mousedown', onDoc);
      document.removeEventListener('keydown', onEsc);
    };
  }, [langOpen]);

  // AI виджет
  const aiBtnRef = useRef(null);
  const [aiOpen, setAiOpen] = useState(false);

  const avatarUrl = user?.avatar_url
    ? String(user.avatar_url).startsWith('http')
      ? user.avatar_url
      : `http://localhost:5050${user.avatar_url}`
    : null;

  return (
    <div className="hdr-wrap">
      <header className="hdr" role="banner">
        <div className="hdr-bg" />

        {/* LOGO */}
        <NavLink to="/" className="logo" aria-label="Home">
          {/* новая “звёздочка” */}
          <span className="logo-star" aria-hidden="true">
<svg width="127" height="47" viewBox="0 0 127 47" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M16.705 37.4639C14.5916 37.4639 12.62 37.116 10.7901 36.4201C8.98595 35.7242 7.41379 34.7449 6.07359 33.482C4.75916 32.2191 3.72824 30.7371 2.98082 29.0361C2.25917 27.3351 1.89835 25.4794 1.89835 23.4691C1.89835 21.4588 2.25917 19.6032 2.98082 17.9021C3.72824 16.2011 4.77205 14.7192 6.11225 13.4563C7.45245 12.1934 9.02461 11.214 10.8287 10.5182C12.6328 9.82229 14.5916 9.47435 16.705 9.47435C18.8441 9.47435 20.8029 9.82229 22.5812 10.5182C24.3854 11.214 25.9446 12.1934 27.2591 13.4563C28.5993 14.6934 29.6431 16.1625 30.3905 17.8635C31.1379 19.5645 31.5116 21.4331 31.5116 23.4691C31.5116 25.4794 31.1379 27.348 30.3905 29.0748C29.6431 30.7758 28.5993 32.2578 27.2591 33.5206C25.9446 34.7577 24.3854 35.7242 22.5812 36.4201C20.8029 37.116 18.8441 37.4639 16.705 37.4639ZM25.558 43.2242C24.5013 43.2242 23.4962 43.1082 22.5426 42.8763C21.6148 42.6443 20.6869 42.2706 19.7591 41.7551C18.857 41.2397 17.9034 40.5438 16.8983 39.6675C15.9189 38.7912 14.8493 37.7088 13.6895 36.4201L20.2617 34.7577C20.9575 35.7113 21.6019 36.4717 22.1946 37.0387C22.7874 37.6057 23.3544 38.0052 23.8957 38.2371C24.4627 38.4691 25.0555 38.585 25.674 38.585C27.3235 38.585 28.7926 37.9149 30.0812 36.5747L32.8647 39.8995C31.0348 42.116 28.5993 43.2242 25.558 43.2242ZM16.705 32.1289C17.9163 32.1289 19.0246 31.9227 20.0297 31.5103C21.0606 31.098 21.9627 30.5052 22.7359 29.732C23.5091 28.9588 24.1019 28.0439 24.5142 26.9872C24.9524 25.9047 25.1714 24.732 25.1714 23.4691C25.1714 22.1805 24.9524 21.0078 24.5142 19.9511C24.1019 18.8944 23.5091 17.9795 22.7359 17.2063C21.9627 16.4331 21.0606 15.8403 20.0297 15.4279C19.0246 15.0156 17.9163 14.8094 16.705 14.8094C15.4936 14.8094 14.3725 15.0156 13.3416 15.4279C12.3107 15.8403 11.4086 16.4331 10.6354 17.2063C9.888 17.9795 9.29522 18.8944 8.85708 19.9511C8.44471 21.0078 8.23853 22.1805 8.23853 23.4691C8.23853 24.732 8.44471 25.9047 8.85708 26.9872C9.29522 28.0439 9.888 28.9588 10.6354 29.732C11.4086 30.5052 12.3107 31.098 13.3416 31.5103C14.3725 31.9227 15.4936 32.1289 16.705 32.1289ZM45.69 37.3093C43.4735 37.3093 41.5019 36.8454 39.7751 35.9175C38.0741 34.9897 36.721 33.7268 35.7158 32.1289C34.7365 30.5052 34.2468 28.6624 34.2468 26.6006C34.2468 24.5129 34.7365 22.6702 35.7158 21.0722C36.721 19.4485 38.0741 18.1857 39.7751 17.2836C41.5019 16.3558 43.4735 15.8919 45.69 15.8919C47.8807 15.8919 49.8395 16.3558 51.5663 17.2836C53.2931 18.1857 54.6462 19.4356 55.6256 21.0336C56.6049 22.6315 57.0946 24.4872 57.0946 26.6006C57.0946 28.6624 56.6049 30.5052 55.6256 32.1289C54.6462 33.7268 53.2931 34.9897 51.5663 35.9175C49.8395 36.8454 47.8807 37.3093 45.69 37.3093ZM45.69 32.3608C46.6952 32.3608 47.5972 32.1289 48.3962 31.665C49.1952 31.2011 49.8266 30.5438 50.2905 29.6933C50.7544 28.817 50.9864 27.7861 50.9864 26.6006C50.9864 25.3892 50.7544 24.3583 50.2905 23.5078C49.8266 22.6573 49.1952 22.0001 48.3962 21.5362C47.5972 21.0722 46.6952 20.8403 45.69 20.8403C44.6849 20.8403 43.7828 21.0722 42.9839 21.5362C42.1849 22.0001 41.5406 22.6573 41.0509 23.5078C40.587 24.3583 40.355 25.3892 40.355 26.6006C40.355 27.7861 40.587 28.817 41.0509 29.6933C41.5406 30.5438 42.1849 31.2011 42.9839 31.665C43.7828 32.1289 44.6849 32.3608 45.69 32.3608ZM73.7675 15.8919C75.417 15.8919 76.886 16.2269 78.1747 16.897C79.4891 17.5413 80.52 18.5465 81.2674 19.9124C82.0149 21.2526 82.3886 22.9794 82.3886 25.0928V37H76.3577V26.0207C76.3577 24.3454 75.984 23.1083 75.2365 22.3093C74.5149 21.5104 73.484 21.1109 72.1438 21.1109C71.1902 21.1109 70.3268 21.3171 69.5536 21.7295C68.8062 22.116 68.2134 22.7217 67.7752 23.5465C67.3629 24.3712 67.1567 25.4279 67.1567 26.7165V37H61.1258V16.2011H66.8861V21.9614L65.8036 20.2217C66.551 18.83 67.6206 17.7604 69.0123 17.013C70.4041 16.2656 71.9891 15.8919 73.7675 15.8919ZM96.3604 37.3093C93.912 37.3093 92.0048 36.6907 90.6388 35.4536C89.2728 34.1907 88.5898 32.3222 88.5898 29.848V11.6006H94.6207V29.7707C94.6207 30.6469 94.8527 31.3299 95.3166 31.8196C95.7805 32.2835 96.4119 32.5155 97.2109 32.5155C98.1645 32.5155 98.9764 32.2578 99.6465 31.7423L101.27 35.9949C100.652 36.433 99.9042 36.768 99.0279 37C98.1774 37.2062 97.2882 37.3093 96.3604 37.3093ZM85.3811 21.3042V16.665H99.8011V21.3042H85.3811ZM114.336 37.3093C111.965 37.3093 109.877 36.8454 108.073 35.9175C106.295 34.9897 104.916 33.7268 103.936 32.1289C102.957 30.5052 102.467 28.6624 102.467 26.6006C102.467 24.5129 102.944 22.6702 103.898 21.0722C104.877 19.4485 106.205 18.1857 107.88 17.2836C109.555 16.3558 111.449 15.8919 113.563 15.8919C115.599 15.8919 117.429 16.33 119.052 17.2063C120.702 18.0568 122.003 19.2939 122.957 20.9176C123.911 22.5155 124.387 24.4356 124.387 26.6779C124.387 26.9098 124.375 27.1805 124.349 27.4897C124.323 27.7732 124.297 28.0439 124.271 28.3016H107.377V24.7836H121.101L118.782 25.8274C118.782 24.7449 118.563 23.8042 118.125 23.0052C117.686 22.2063 117.081 21.5877 116.308 21.1496C115.534 20.6856 114.632 20.4537 113.601 20.4537C112.57 20.4537 111.656 20.6856 110.857 21.1496C110.083 21.5877 109.478 22.2191 109.04 23.0439C108.601 23.8428 108.382 24.7964 108.382 25.9047V26.8325C108.382 27.9665 108.627 28.9717 109.117 29.848C109.632 30.6985 110.341 31.3557 111.243 31.8196C112.171 32.2578 113.253 32.4768 114.491 32.4768C115.599 32.4768 116.565 32.3093 117.39 31.9742C118.241 31.6392 119.014 31.1366 119.71 30.4665L122.918 33.9459C121.965 35.0284 120.766 35.866 119.323 36.4588C117.88 37.0258 116.217 37.3093 114.336 37.3093Z" fill="white"/>
<path d="M16.5396 15.9453L17.2511 18.0929C17.6166 19.1859 18.231 20.1791 19.046 20.9941C19.861 21.8091 20.8542 22.4235 21.9472 22.789L24.0948 23.5005L21.9472 24.2121C20.8542 24.5775 19.861 25.1919 19.046 26.0069C18.231 26.8219 17.6166 27.8151 17.2511 28.9081L16.5396 31.0557L15.828 28.9081C15.4626 27.8151 14.8481 26.8219 14.0331 26.0069C13.2182 25.1919 12.225 24.5775 11.1319 24.2121L8.98438 23.5005L11.1319 22.789C12.225 22.4235 13.2182 21.8091 14.0331 20.9941C14.8481 20.1791 15.4626 19.1859 15.828 18.0929L16.5396 15.9453Z" fill="#7AD293"/>
</svg>

          </span>
          {/*<span className="logo-text">Qonte</span> */}
        </NavLink>

        {/* SEARCH */}
        <form className="search-wrap" onSubmit={onSearch} role="search">
          <input
            className="search-input"
            type="search"
            placeholder={tt('search.placeholder', 'Пошук товарів…')}
            value={q}
            onChange={(e) => setQ(e.target.value)}
          />
          <button className="search-btn" type="submit" aria-label={tt('search.search', 'Знайти')}>
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" aria-hidden="true">
              <circle cx="11" cy="11" r="7" />
              <line x1="21" y1="21" x2="16.65" y2="16.65" />
            </svg>
          </button>
        </form>

        {/* КНОПКА AI */}
        <button
          ref={aiBtnRef}
          className="btn-ai"
          type="button"
          onClick={() => setAiOpen((v) => !v)}
          aria-expanded={aiOpen}
          aria-controls="ai-chat-popover"
          title="AI-Consultant"
        >
          <span className="ai-ico" aria-hidden="true">
            {/* новая иконка AI консультанта */}
            <svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clipPath="url(#clip0_ai)">
                <path d="M12.7959 2.4375C14.7343 2.4375 16.4121 3.5536 17.2227 5.18066L17.2441 5.22559C17.3 5.34104 17.3529 5.45949 17.4004 5.58105L17.4062 5.5957L17.4131 5.60938C19.4132 10.1587 21.6752 14.4807 24.208 18.4951C23.284 18.5591 22.2148 18.534 21.1484 18.3574C19.7917 18.1327 18.4906 17.6744 17.4951 16.9072L16.8828 16.4355L16.4297 17.0615L12.834 22.0283L9.23926 17.0615L8.78613 16.4346L8.17383 16.9072C7.17889 17.6742 5.87814 18.1316 4.52148 18.3564C3.45447 18.5333 2.38426 18.5594 1.45996 18.4951C3.97715 14.4953 6.17573 10.1786 8.16211 5.6582L8.16992 5.63965L8.17676 5.62109C8.23277 5.47307 8.29738 5.32726 8.36914 5.18262L8.37988 5.16211C9.19365 3.54509 10.8656 2.43764 12.7959 2.4375Z" stroke="#7AD293" strokeWidth="1.5"/>
              </g>
              <defs>
                <clipPath id="clip0_ai">
                  <rect width="24.8881" height="24.8881" fill="white" transform="translate(0.390625 0.5)"/>
                </clipPath>
              </defs>
            </svg>
          </span>
          <span className="ai-label">AI-Консультант</span>
        </button>

        {/* ПОПОВЕР ПРЯМО ПОД КНОПКОЙ */}
        {aiOpen && (
          <ChatWidget
            id="ai-chat-popover"
            anchorRef={aiBtnRef}
            onClose={() => setAiOpen(false)}
          />
        )}

        {/* КАТАЛОГ */}
        <NavLink to="/catalog" className="btn-cat" title={tt('catalog.catalog', 'Каталог')}>
          <span className="cat-ico" aria-hidden="true">
            {/* новый каталог */}
            <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
              <mask id="m1" fill="white">
                <rect x="3.29688" y="2.90234" width="8.1568" height="8.1568" rx="0.833333"/>
              </mask>
              <rect x="3.29688" y="2.90234" width="8.1568" height="8.1568" rx="0.833333" stroke="#7AD293" strokeWidth="3" mask="url(#m1)"/>
              <mask id="m2" fill="white">
                <rect x="14.3359" y="2.90234" width="8.1568" height="8.1568" rx="0.833333"/>
              </mask>
              <rect x="14.3359" y="2.90234" width="8.1568" height="8.1568" rx="0.833333" stroke="#7AD293" strokeWidth="3" mask="url(#m2)"/>
              <mask id="m3" fill="white">
                <rect x="14.3359" y="13.9375" width="8.1568" height="8.1568" rx="0.833333"/>
              </mask>
              <rect x="14.3359" y="13.9375" width="8.1568" height="8.1568" rx="0.833333" stroke="#7AD293" strokeWidth="3" mask="url(#m3)"/>
              <mask id="m4" fill="white">
                <rect x="3.29688" y="13.9375" width="8.1568" height="8.1568" rx="0.833333"/>
              </mask>
              <rect x="3.29688" y="13.9375" width="8.1568" height="8.1568" rx="0.833333" stroke="#7AD293" strokeWidth="3" mask="url(#m4)"/>
            </svg>
          </span>
          <span className="cat-label">{tt('catalog.title', 'Каталог')}</span>
        </NavLink>

        {/* Язык */}
        <button
          ref={langBtnRef}
          className="ico ico-lang"
          type="button"
          onClick={onToggleLang}
          aria-haspopup="menu"
          aria-expanded={langOpen}
          title={tt('currency.change', 'Змінити мову')}
        >
          {/* новый значок языка */}
          <svg width="31" height="31" viewBox="0 0 31 31" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
            <path d="M8.39062 11.5L14.3906 17.5M7.39062 17.5L13.3906 11.5L15.3906 8.5M5.39062 8.5H17.3906M10.3906 5.5H11.3906M25.3906 25.5L20.3906 15.5L15.3906 25.5M17.3906 21.5H23.3906" stroke="#ECECEC" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </button>

        {/* Избранное */}
        <NavLink to="/favorites" className="ico ico-heart" title={tt('favorites', 'Обране')}>
          {/* новый wishlist */}
          <svg width="31" height="31" viewBox="0 0 31 31" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
            <path d="M20.0654 6.5C23.0637 6.5 25.3905 8.81061 25.3906 11.7754C25.3906 13.5949 24.5729 15.3313 22.9238 17.333C21.2641 19.3477 18.8704 21.5057 15.8896 24.1875L15.8877 24.1895L14.8906 25.0898L13.8936 24.1895L13.8916 24.1875C10.9108 21.5057 8.51714 19.3477 6.85742 17.333C5.20836 15.3313 4.39062 13.5949 4.39062 11.7754C4.39071 8.81061 6.71755 6.5 9.71582 6.5C11.4174 6.50006 13.0653 7.29096 14.1348 8.52734L14.8906 9.40137L15.6465 8.52734C16.716 7.29096 18.3639 6.50006 20.0654 6.5Z" stroke="#ECECEC" strokeWidth="2"/>
          </svg>
        </NavLink>

        {/* Корзина */}
        <NavLink
          to="/cart"
          className="ico ico-cart"
          aria-label={tt('cart.cart', 'Кошик')}
          title={tt('cart.cart', 'Кошик')}
        >
          {/* новая корзина */}
          <svg width="31" height="31" viewBox="0 0 31 31" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
            <mask id="cart-mask" fill="white">
              <path d="M22.5906 22.7C21.2586 22.7 20.1906 23.768 20.1906 25.1C20.1906 25.7365 20.4435 26.347 20.8936 26.7971C21.3437 27.2471 21.9541 27.5 22.5906 27.5C23.2271 27.5 23.8376 27.2471 24.2877 26.7971C24.7378 26.347 24.9906 25.7365 24.9906 25.1C24.9906 24.4635 24.7378 23.853 24.2877 23.4029C23.8376 22.9529 23.2271 22.7 22.5906 22.7ZM4.59062 3.5C3.92788 3.5 3.39062 4.03726 3.39062 4.7C3.39062 5.36274 3.92788 5.9 4.59063 5.9H5.79063L10.1106 15.008L8.47862 17.948C8.29862 18.284 8.19063 18.68 8.19063 19.1C8.19063 19.7365 8.44348 20.347 8.89357 20.7971C9.34366 21.2471 9.95411 21.5 10.5906 21.5H23.7906C24.4534 21.5 24.9906 20.9627 24.9906 20.3C24.9906 19.6373 24.4534 19.1 23.7906 19.1H11.0946C11.0151 19.1 10.9388 19.0684 10.8825 19.0121C10.8262 18.9559 10.7946 18.8796 10.7946 18.8C10.7946 18.74 10.8066 18.692 10.8306 18.656L11.9106 16.7H20.8506C21.7506 16.7 22.5426 16.196 22.9506 15.464L27.2466 7.7C27.3306 7.508 27.3906 7.304 27.3906 7.1C27.3906 6.78174 27.2642 6.47652 27.0392 6.25147C26.8141 6.02643 26.5089 5.9 26.1906 5.9H8.44263L7.31463 3.5M10.5906 22.7C9.25863 22.7 8.19063 23.768 8.19063 25.1C8.19063 25.7365 8.44348 26.347 8.89357 26.7971C9.34366 27.2471 9.95411 27.5 10.5906 27.5C11.2271 27.5 11.8376 27.2471 12.2877 26.7971C12.7378 26.347 12.9906 25.7365 12.9906 25.1C12.9906 24.4635 12.7378 23.853 12.2877 23.4029C11.8376 22.9529 11.2271 22.7 10.5906 22.7Z"/>
            </mask>
            <path d="M22.5906 22.7C21.2586 22.7 20.1906 23.768 20.1906 25.1C20.1906 25.7365 20.4435 26.347 20.8936 26.7971C21.3437 27.2471 21.9541 27.5 22.5906 27.5C23.2271 27.5 23.8376 27.2471 24.2877 26.7971C24.7378 26.347 24.9906 25.7365 24.9906 25.1C24.9906 24.4635 24.7378 23.853 24.2877 23.4029C23.8376 22.9529 23.2271 22.7 22.5906 22.7ZM4.59062 3.5C3.92788 3.5 3.39062 4.03726 3.39062 4.7C3.39062 5.36274 3.92788 5.9 4.59063 5.9H5.79063L10.1106 15.008L8.47862 17.948C8.29862 18.284 8.19063 18.68 8.19063 19.1C8.19063 19.7365 8.44348 20.347 8.89357 20.7971C9.34366 21.2471 9.95411 21.5 10.5906 21.5H23.7906C24.4534 21.5 24.9906 20.9627 24.9906 20.3C24.9906 19.6373 24.4534 19.1 23.7906 19.1H11.0946C11.0151 19.1 10.9388 19.0684 10.8825 19.0121C10.8262 18.9559 10.7946 18.8796 10.7946 18.8C10.7946 18.74 10.8066 18.692 10.8306 18.656L11.9106 16.7H20.8506C21.7506 16.7 22.5426 16.196 22.9506 15.464L27.2466 7.7C27.3306 7.508 27.3906 7.304 27.3906 7.1C27.3906 6.78174 27.2642 6.47652 27.0392 6.25147C26.8141 6.02643 26.5089 5.9 26.1906 5.9H8.44263L7.31463 3.5M10.5906 22.7C9.25863 22.7 8.19063 23.768 8.19063 25.1C8.19063 25.7365 8.44348 26.347 8.89357 26.7971C9.34366 27.2471 9.95411 27.5 10.5906 27.5C11.2271 27.5 11.8376 27.2471 12.2877 26.7971C12.7378 26.347 12.9906 25.7365 12.9906 25.1C12.9906 24.4635 12.7378 23.853 12.2877 23.4029C11.8376 22.9529 11.2271 22.7 10.5906 22.7Z" fill="#ECECEC" />
            <rect x="4.07208" y="4.53693" width="2.34021" height="0.65979" stroke="#ECECEC" strokeWidth="0.65979"/>
          </svg>
        </NavLink>

        {/* Профиль / Вход */}
        {user ? (
          <button className="ico-user" type="button" onClick={() => navigate('/profile')} title={tt('nav.profile', 'Профіль')}>
            {avatarUrl ? (
              <img
                src={avatarUrl}
                alt="avatar"
                style={{ width: 24, height: 24, objectFit: 'cover', borderRadius: 4, display: 'block' }}
              />
            ) : (
              // новый профиль
              <svg width="33" height="33" viewBox="0 0 33 33" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                <path d="M5.72656 24.4974C5.72656 23.0829 6.28847 21.7264 7.28866 20.7262C8.28885 19.726 9.64541 19.1641 11.0599 19.1641H21.7266C23.1411 19.1641 24.4976 19.726 25.4978 20.7262C26.498 21.7264 27.0599 23.0829 27.0599 24.4974C27.0599 25.2046 26.7789 25.8829 26.2788 26.383C25.7787 26.8831 25.1005 27.1641 24.3932 27.1641H8.39323C7.68599 27.1641 7.00771 26.8831 6.50761 26.383C6.00751 25.8829 5.72656 25.2046 5.72656 24.4974Z" fill="#7AD293" stroke="#7AD293" strokeWidth="2" strokeLinejoin="round"/>
                <path d="M16.3906 13.832C18.5998 13.832 20.3906 12.0412 20.3906 9.83203C20.3906 7.62289 18.5998 5.83203 16.3906 5.83203C14.1815 5.83203 12.3906 7.62289 12.3906 9.83203C12.3906 12.0412 14.1815 13.832 16.3906 13.832Z" fill="#7AD293" stroke="#7AD293" strokeWidth="2"/>
              </svg>
            )}
          </button>
        ) : (
          <NavLink to="/auth" className="ico-user" title={tt('auth.login', 'Увійти')}>
            <svg width="33" height="33" viewBox="0 0 33 33" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
              <path d="M5.72656 24.4974C5.72656 23.0829 6.28847 21.7264 7.28866 20.7262C8.28885 19.726 9.64541 19.1641 11.0599 19.1641H21.7266C23.1411 19.1641 24.4976 19.726 25.4978 20.7262C26.498 21.7264 27.0599 23.0829 27.0599 24.4974C27.0599 25.2046 26.7789 25.8829 26.2788 26.383C25.7787 26.8831 25.1005 27.1641 24.3932 27.1641H8.39323C7.68599 27.1641 7.00771 26.8831 6.50761 26.383C6.00751 25.8829 5.72656 25.2046 5.72656 24.4974Z" fill="#7AD293" stroke="#7AD293" strokeWidth="2" strokeLinejoin="round"/>
              <path d="M16.3906 13.832C18.5998 13.832 20.3906 12.0412 20.3906 9.83203C20.3906 7.62289 18.5998 5.83203 16.3906 5.83203C14.1815 5.83203 12.3906 7.62289 12.3906 9.83203C12.3906 12.0412 14.1815 13.832 16.3906 13.832Z" fill="#7AD293" stroke="#7AD293" strokeWidth="2"/>
            </svg>
          </NavLink>
        )}

        {/* Выпадашка языка */}
        {langOpen && (
          <div
            ref={menuRef}
            role="menu"
            style={{
              position: 'fixed',
              left: langPos.left,
              top: langPos.top,
              background: '#fff',
              border: '1px solid #e5e7eb',
              borderRadius: 12,
              padding: 6,
              minWidth: 180,
              boxShadow: '0 8px 24px rgba(0,0,0,0.12)',
              zIndex: 9999,
            }}
          >
            {langs.map(({ code, label }) => {
              const active = i18n.language.startsWith(code);
              return (
                <button
                  key={code}
                  onClick={() => {
                    changeLang(code);
                    setLangOpen(false);
                  }}
                  role="menuitem"
                  style={{
                    width: '100%',
                    textAlign: 'left',
                    padding: '10px 12px',
                    border: 'none',
                    background: active ? '#f3f4f6' : 'transparent',
                    borderRadius: 10,
                    cursor: 'pointer',
                    fontWeight: active ? 700 : 500,
                    display: 'flex',
                    alignItems: 'center',
                    gap: 8,
                  }}
                >
                  <span style={{ fontSize: 14, lineHeight: 1, transform: 'translateY(1px)' }}>
                    {flagByLang(code)}
                  </span>
                  {label}
                </button>
              );
            })}
            {user && (
              <button
                onClick={handleLogout}
                style={{
                  marginTop: 6,
                  width: '100%',
                  textAlign: 'left',
                  padding: '10px 12px',
                  border: 'none',
                  background: 'transparent',
                  borderRadius: 10,
                  cursor: 'pointer',
                  color: '#b91c1c',
                  fontWeight: 600,
                }}
              >
                {tt('auth.logout', 'Вийти')}
              </button>
            )}
          </div>
        )}
      </header>
    </div>
  );
}
